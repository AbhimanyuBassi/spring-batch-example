@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private DataSource dataSource;

    @Bean
    public MultiResourceItemReader<File> multiResourceItemReader() {
        MultiResourceItemReader<File> reader = new MultiResourceItemReader<>();
        reader.setResources(new PathMatchingResourcePatternResolver().getResources("file:/path/to/directory/*.txt"));
        reader.setDelegate(new FlatFileItemReaderBuilder<File>()
            .name("fileItemReader")
            .lineMapper(new PassThroughLineMapper())
            .build());
        return reader;
    }

    @Bean
    public ItemProcessor<File, MyData> itemProcessor() {
        return new MyDataProcessor();
    }

    @Bean
    public JdbcBatchItemWriter<MyData> jdbcBatchItemWriter() {
        JdbcBatchItemWriter<MyData> writer = new JdbcBatchItemWriter<>();
        writer.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>());
        writer.setSql("INSERT INTO my_data (name, value) VALUES (:name, :value)");
        writer.setDataSource(dataSource);
        return writer;
    }

    @Bean
    public Step step() {
        return stepBuilderFactory.get("step")
            .<File, MyData>chunk(10)
            .reader(multiResourceItemReader())
            .processor(itemProcessor())
            .writer(jdbcBatchItemWriter())
            .build();
    }

    @Bean
    public Job job() {
        return jobBuilderFactory.get("job")
            .incrementer(new RunIdIncrementer())
            .start(step())
            .build();
    }

}
